# دليل التوثيق الشامل لنظام نفاذ (NAFATH) - للتطبيق في TypeScript/Next.js/React

## 📋 نظرة عامة

هذا الدليل يوثق نظام التوثيق والتوقيع الإلكتروني عبر نفاذ (NAFATH) المستخرج من مشروع Laravel، مع توفير كل ما تحتاجه لتطبيقه في مشروع TypeScript/Next.js/React.

## 🎯 الميزات المتوفرة

- ✅ التحقق من الهوية الوطنية عبر تطبيق نفاذ
- ✅ التوقيع الإلكتروني للعقود والوثائق
- ✅ استقبال البيانات المتحقق منها (الاسم الكامل باللغتين)
- ✅ حفظ الوثائق الموقعة
- ✅ نظام callbacks للتحديثات الفورية
- ✅ قوالب عقود جاهزة (3 أنواع مختلفة)

## 🛠️ المتطلبات الأساسية

### 1. بيانات الاعتماد من نفاذ

```bash
NAFATH_THUMBPRINT=your_certificate_thumbprint
NAFATH_ACCOUNT_ID=your_account_id
NAFATH_BASE_URL=https://apigw.sadq.sa
```

### 2. قاعدة البيانات

```sql
-- جدول حفظ طلبات نافذ
CREATE TABLE nafath_requests (
    request_id VARCHAR(36) PRIMARY KEY,
    user_id BIGINT UNSIGNED NULL,
    national_id VARCHAR(20) NOT NULL,
    status ENUM('pending', 'approved', 'failed') DEFAULT 'pending',
    signed_file_path VARCHAR(255) NULL,
    first_name_ar VARCHAR(255) NULL,
    first_name_en VARCHAR(255) NULL,
    middle_name_ar VARCHAR(255) NULL,
    middle_name_en VARCHAR(255) NULL,
    third_name_ar VARCHAR(255) NULL,
    third_name_en VARCHAR(255) NULL,
    last_name_ar VARCHAR(255) NULL,
    last_name_en VARCHAR(255) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_national_id (national_id),
    INDEX idx_status (status),
    INDEX idx_user_id (user_id)
);

-- جداول إضافية لأنواع مختلفة من المستخدمين
CREATE TABLE investor_nafath_requests (
    request_id VARCHAR(36) PRIMARY KEY,
    national_id VARCHAR(20) NOT NULL,
    status ENUM('pending', 'approved', 'failed') DEFAULT 'pending',
    signed_file_path VARCHAR(255) NULL,
    first_name_ar VARCHAR(255) NULL,
    first_name_en VARCHAR(255) NULL,
    middle_name_ar VARCHAR(255) NULL,
    middle_name_en VARCHAR(255) NULL,
    third_name_ar VARCHAR(255) NULL,
    third_name_en VARCHAR(255) NULL,
    last_name_ar VARCHAR(255) NULL,
    last_name_en VARCHAR(255) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE portal_logistice_nafath_requests (
    request_id VARCHAR(36) PRIMARY KEY,
    national_id VARCHAR(20) NOT NULL,
    status ENUM('pending', 'approved', 'failed') DEFAULT 'pending',
    signed_file_path VARCHAR(255) NULL,
    first_name_ar VARCHAR(255) NULL,
    first_name_en VARCHAR(255) NULL,
    middle_name_ar VARCHAR(255) NULL,
    middle_name_en VARCHAR(255) NULL,
    third_name_ar VARCHAR(255) NULL,
    third_name_en VARCHAR(255) NULL,
    last_name_ar VARCHAR(255) NULL,
    last_name_en VARCHAR(255) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

## 🚀 APIs المتوفرة

### 1. بدء عملية التحقق من الهوية

**Endpoint:** `POST /api/nafath/initiate`

**Request Body:**
```typescript
interface InitiateRequest {
  national_id: string;
  user_id?: number;
}
```

**Response:**
```typescript
interface InitiateResponse {
  status: 'sent' | 'error';
  request_id: string;
  message?: string;
  code?: string;
  external_response: any;
}
```

**cURL Example:**
```bash
curl -X POST "https://your-domain.com/api/nafath/initiate" \
  -H "Content-Type: application/json" \
  -d '{
    "national_id": "1234567890",
    "user_id": 1
  }'
```

### 2. التحقق من حالة الطلب

**Endpoint:** `POST /api/nafath/check-status`

**Request Body:**
```typescript
interface CheckStatusRequest {
  national_id: string;
  user_id?: number;
}
```

**Response:**
```typescript
interface CheckStatusResponse {
  status: 'pending' | 'approved' | 'failed' | 'not_found';
  national_id: string;
  request_id: string;
  full_name_ar: string;
  signed_file_url?: string;
  message?: string;
}
```

### 3. استقبال Callback من نفاذ

**Endpoint:** `POST /api/nafath/callback`

**Request Body (من نفاذ):**
```typescript
interface CallbackRequest {
  requestId: string;
  Status: number; // 0 = success, 1 = failed
  usersInfo?: Array<{
    FirstNameEn: string;
    FirstNameAr: string;
    MiddleNameEn: string;
    MiddleNameAr: string;
    ThirdNameEn: string;
    ThirdNameAr: string;
    LastNameEn: string;
    LastNameAr: string;
  }>;
}
```

### 4. توقيع العقد

**Endpoint:** `POST /api/nafath/sign`

**Request Body:**
```typescript
interface SignRequest {
  national_id: string;
  user_id?: number;
  contract_data: {
    company_name: string;
    city: string;
    neighborhood: string;
    house_type: string;
    contract_terms?: string;
    [key: string]: any;
  };
}
```

**Response:**
```typescript
interface SignResponse {
  signed: boolean;
  message: string;
  file_url?: string;
  error?: string;
}
```

## 📱 تطبيق في TypeScript/Next.js

### 1. Types و Interfaces

```typescript
// types/nafath.ts
export interface NafathRequest {
  request_id: string;
  user_id?: number;
  national_id: string;
  status: 'pending' | 'approved' | 'failed';
  signed_file_path?: string;
  first_name_ar?: string;
  first_name_en?: string;
  middle_name_ar?: string;
  middle_name_en?: string;
  third_name_ar?: string;
  third_name_en?: string;
  last_name_ar?: string;
  last_name_en?: string;
  created_at: string;
  updated_at: string;
}

export interface NafathConfig {
  thumbPrint: string;
  accountId: string;
  baseUrl: string;
}

export interface ContractData {
  company_name: string;
  city: string;
  neighborhood: string;
  house_type: string;
  contract_terms?: string;
  fullname?: string;
  national_id?: string;
  [key: string]: any;
}
```

### 2. Nafath Service Class

```typescript
// services/nafathService.ts
import axios, { AxiosResponse } from 'axios';

export class NafathService {
  private baseUrl: string;
  private config: NafathConfig;

  constructor(config: NafathConfig) {
    this.config = config;
    this.baseUrl = '/api/nafath'; // Your backend API base
  }

  /**
   * بدء عملية التحقق من الهوية
   */
  async initiate(nationalId: string, userId?: number): Promise<InitiateResponse> {
    try {
      const response: AxiosResponse<InitiateResponse> = await axios.post(
        `${this.baseUrl}/initiate`,
        {
          national_id: nationalId,
          user_id: userId,
        }
      );
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  }

  /**
   * التحقق من حالة الطلب
   */
  async checkStatus(nationalId: string, userId?: number): Promise<CheckStatusResponse> {
    try {
      const response: AxiosResponse<CheckStatusResponse> = await axios.post(
        `${this.baseUrl}/check-status`,
        {
          national_id: nationalId,
          user_id: userId,
        }
      );
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  }

  /**
   * توقيع العقد
   */
  async signContract(
    nationalId: string,
    contractData: ContractData,
    userId?: number
  ): Promise<SignResponse> {
    try {
      const response: AxiosResponse<SignResponse> = await axios.post(
        `${this.baseUrl}/sign`,
        {
          national_id: nationalId,
          user_id: userId,
          contract_data: contractData,
        }
      );
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  }

  /**
   * التحقق المستمر من الحالة
   */
  async pollStatus(
    nationalId: string,
    userId?: number,
    interval: number = 3000,
    maxAttempts: number = 60
  ): Promise<CheckStatusResponse> {
    return new Promise((resolve, reject) => {
      let attempts = 0;
      
      const poll = async () => {
        try {
          attempts++;
          const result = await this.checkStatus(nationalId, userId);
          
          if (result.status === 'approved' || result.status === 'failed') {
            resolve(result);
          } else if (attempts >= maxAttempts) {
            reject(new Error('انتهت مهلة الانتظار'));
          } else {
            setTimeout(poll, interval);
          }
        } catch (error) {
          reject(error);
        }
      };
      
      poll();
    });
  }

  private handleError(error: any): Error {
    if (error.response?.data?.message) {
      return new Error(error.response.data.message);
    }
    return new Error('حدث خطأ في الاتصال بخدمة نفاذ');
  }
}
```

### 3. React Hook للتعامل مع نفاذ

```typescript
// hooks/useNafath.ts
import { useState, useCallback } from 'react';
import { NafathService } from '../services/nafathService';

interface UseNafathProps {
  config: NafathConfig;
}

export const useNafath = ({ config }: UseNafathProps) => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [nafathService] = useState(() => new NafathService(config));

  const initiate = useCallback(async (nationalId: string, userId?: number) => {
    setLoading(true);
    setError(null);
    
    try {
      const result = await nafathService.initiate(nationalId, userId);
      return result;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'حدث خطأ غير متوقع';
      setError(errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  }, [nafathService]);

  const checkStatus = useCallback(async (nationalId: string, userId?: number) => {
    setLoading(true);
    setError(null);
    
    try {
      const result = await nafathService.checkStatus(nationalId, userId);
      return result;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'حدث خطأ غير متوقع';
      setError(errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  }, [nafathService]);

  const signContract = useCallback(async (
    nationalId: string,
    contractData: ContractData,
    userId?: number
  ) => {
    setLoading(true);
    setError(null);
    
    try {
      const result = await nafathService.signContract(nationalId, contractData, userId);
      return result;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'حدث خطأ غير متوقع';
      setError(errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  }, [nafathService]);

  const pollStatus = useCallback(async (
    nationalId: string,
    userId?: number,
    interval?: number,
    maxAttempts?: number
  ) => {
    setLoading(true);
    setError(null);
    
    try {
      const result = await nafathService.pollStatus(nationalId, userId, interval, maxAttempts);
      return result;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'حدث خطأ غير متوقع';
      setError(errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  }, [nafathService]);

  return {
    initiate,
    checkStatus,
    signContract,
    pollStatus,
    loading,
    error,
    clearError: () => setError(null),
  };
};
```

### 4. React Components

```typescript
// components/NafathAuth.tsx
import React, { useState } from 'react';
import { useNafath } from '../hooks/useNafath';

interface NafathAuthProps {
  config: NafathConfig;
  onSuccess: (data: CheckStatusResponse) => void;
  onError: (error: string) => void;
}

export const NafathAuth: React.FC<NafathAuthProps> = ({
  config,
  onSuccess,
  onError,
}) => {
  const [nationalId, setNationalId] = useState('');
  const [isPolling, setIsPolling] = useState(false);
  const { initiate, pollStatus, loading, error } = useNafath({ config });

  const handleInitiate = async () => {
    if (!nationalId || nationalId.length < 10) {
      onError('يرجى إدخال رقم هوية صحيح');
      return;
    }

    try {
      const result = await initiate(nationalId);
      
      if (result.status === 'sent') {
        setIsPolling(true);
        
        // بدء التحقق المستمر من الحالة
        const statusResult = await pollStatus(nationalId);
        
        if (statusResult.status === 'approved') {
          onSuccess(statusResult);
        } else {
          onError('فشل في التحقق من الهوية');
        }
      } else {
        onError(result.message || 'فشل في إرسال طلب التحقق');
      }
    } catch (err) {
      onError(err instanceof Error ? err.message : 'حدث خطأ غير متوقع');
    } finally {
      setIsPolling(false);
    }
  };

  return (
    <div className="nafath-auth-container">
      <div className="form-group">
        <label htmlFor="nationalId">رقم الهوية الوطنية</label>
        <input
          type="text"
          id="nationalId"
          value={nationalId}
          onChange={(e) => setNationalId(e.target.value)}
          placeholder="أدخل رقم الهوية الوطنية"
          maxLength={10}
          disabled={loading || isPolling}
        />
      </div>

      <button
        onClick={handleInitiate}
        disabled={loading || isPolling || !nationalId}
        className="nafath-button"
      >
        {loading || isPolling ? 'جاري التحقق...' : 'التحقق عبر نفاذ'}
      </button>

      {isPolling && (
        <div className="polling-message">
          <p>تم إرسال طلب التحقق. يرجى فتح تطبيق نفاذ للموافقة.</p>
          <div className="spinner"></div>
        </div>
      )}

      {error && (
        <div className="error-message">
          {error}
        </div>
      )}
    </div>
  );
};
```

```typescript
// components/ContractSigner.tsx
import React, { useState } from 'react';
import { useNafath } from '../hooks/useNafath';

interface ContractSignerProps {
  config: NafathConfig;
  nationalId: string;
  userId?: number;
  onSuccess: (signedFileUrl: string) => void;
  onError: (error: string) => void;
}

export const ContractSigner: React.FC<ContractSignerProps> = ({
  config,
  nationalId,
  userId,
  onSuccess,
  onError,
}) => {
  const [contractData, setContractData] = useState<ContractData>({
    company_name: 'شركة شلة التجارية',
    city: '',
    neighborhood: '',
    house_type: '',
    contract_terms: 'بنود العقد الأساسية...',
  });

  const { signContract, loading, error } = useNafath({ config });

  const handleSign = async () => {
    if (!contractData.city || !contractData.neighborhood || !contractData.house_type) {
      onError('يرجى تعبئة جميع البيانات المطلوبة');
      return;
    }

    try {
      const result = await signContract(nationalId, contractData, userId);
      
      if (result.signed && result.file_url) {
        onSuccess(result.file_url);
      } else {
        onError(result.error || 'فشل في توقيع العقد');
      }
    } catch (err) {
      onError(err instanceof Error ? err.message : 'حدث خطأ غير متوقع');
    }
  };

  return (
    <div className="contract-signer-container">
      <h3>بيانات العقد</h3>
      
      <div className="form-group">
        <label>المدينة</label>
        <input
          type="text"
          value={contractData.city}
          onChange={(e) => setContractData({...contractData, city: e.target.value})}
          placeholder="أدخل المدينة"
        />
      </div>

      <div className="form-group">
        <label>الحي</label>
        <input
          type="text"
          value={contractData.neighborhood}
          onChange={(e) => setContractData({...contractData, neighborhood: e.target.value})}
          placeholder="أدخل الحي"
        />
      </div>

      <div className="form-group">
        <label>نوع السكن</label>
        <select
          value={contractData.house_type}
          onChange={(e) => setContractData({...contractData, house_type: e.target.value})}
        >
          <option value="">اختر نوع السكن</option>
          <option value="villa">فيلا</option>
          <option value="apartment">شقة</option>
          <option value="traditional">بيت شعبي</option>
        </select>
      </div>

      <button
        onClick={handleSign}
        disabled={loading}
        className="sign-button"
      >
        {loading ? 'جاري التوقيع...' : 'توقيع العقد'}
      </button>

      {error && (
        <div className="error-message">
          {error}
        </div>
      )}
    </div>
  );
};
```

### 5. صفحة Next.js كاملة

```typescript
// pages/nafath-demo.tsx
import React, { useState } from 'react';
import { NafathAuth } from '../components/NafathAuth';
import { ContractSigner } from '../components/ContractSigner';

const NafathDemo: React.FC = () => {
  const [step, setStep] = useState<'auth' | 'contract' | 'completed'>('auth');
  const [authData, setAuthData] = useState<CheckStatusResponse | null>(null);
  const [signedFileUrl, setSignedFileUrl] = useState<string>('');

  const nafathConfig: NafathConfig = {
    thumbPrint: process.env.NEXT_PUBLIC_NAFATH_THUMBPRINT!,
    accountId: process.env.NEXT_PUBLIC_NAFATH_ACCOUNT_ID!,
    baseUrl: process.env.NEXT_PUBLIC_NAFATH_BASE_URL!,
  };

  const handleAuthSuccess = (data: CheckStatusResponse) => {
    setAuthData(data);
    setStep('contract');
  };

  const handleAuthError = (error: string) => {
    console.error('خطأ في التحقق:', error);
    alert(error);
  };

  const handleSignSuccess = (fileUrl: string) => {
    setSignedFileUrl(fileUrl);
    setStep('completed');
  };

  const handleSignError = (error: string) => {
    console.error('خطأ في التوقيع:', error);
    alert(error);
  };

  const resetDemo = () => {
    setStep('auth');
    setAuthData(null);
    setSignedFileUrl('');
  };

  return (
    <div className="nafath-demo">
      <div className="container">
        <h1>نظام التوثيق والتوقيع الإلكتروني - نفاذ</h1>
        
        <div className="progress-bar">
          <div className={`step ${step === 'auth' ? 'active' : step !== 'auth' ? 'completed' : ''}`}>
            1. التحقق من الهوية
          </div>
          <div className={`step ${step === 'contract' ? 'active' : step === 'completed' ? 'completed' : ''}`}>
            2. توقيع العقد
          </div>
          <div className={`step ${step === 'completed' ? 'active' : ''}`}>
            3. مكتمل
          </div>
        </div>

        {step === 'auth' && (
          <div className="step-content">
            <h2>التحقق من الهوية عبر نفاذ</h2>
            <NafathAuth
              config={nafathConfig}
              onSuccess={handleAuthSuccess}
              onError={handleAuthError}
            />
          </div>
        )}

        {step === 'contract' && authData && (
          <div className="step-content">
            <h2>توقيع العقد</h2>
            <div className="user-info">
              <p><strong>الاسم:</strong> {authData.full_name_ar}</p>
              <p><strong>رقم الهوية:</strong> {authData.national_id}</p>
            </div>
            <ContractSigner
              config={nafathConfig}
              nationalId={authData.national_id}
              onSuccess={handleSignSuccess}
              onError={handleSignError}
            />
          </div>
        )}

        {step === 'completed' && (
          <div className="step-content">
            <h2>تم التوقيع بنجاح! ✅</h2>
            <div className="success-message">
              <p>تم توقيع العقد بنجاح وحفظه في النظام.</p>
              {signedFileUrl && (
                <div className="file-download">
                  <a
                    href={signedFileUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="download-button"
                  >
                    تحميل العقد الموقع
                  </a>
                </div>
              )}
              <button onClick={resetDemo} className="reset-button">
                بدء عملية جديدة
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default NafathDemo;
```

## 🔧 Backend Implementation (Node.js/Express)

### 1. Express Routes

```typescript
// routes/nafath.ts
import express from 'express';
import { NafathController } from '../controllers/nafathController';

const router = express.Router();
const nafathController = new NafathController();

router.post('/initiate', nafathController.initiate);
router.post('/check-status', nafathController.checkStatus);
router.post('/callback', nafathController.callback);
router.post('/sign', nafathController.sign);

export { router as nafathRoutes };
```

### 2. Controller Implementation

```typescript
// controllers/nafathController.ts
import { Request, Response } from 'express';
import axios from 'axios';
import { v4 as uuidv4 } from 'uuid';
import { PDFDocument, StandardFonts } from 'pdf-lib';
import { NafathRequestModel } from '../models/nafathRequest';

export class NafathController {
  private nafathConfig = {
    thumbPrint: process.env.NAFATH_THUMBPRINT!,
    accountId: process.env.NAFATH_ACCOUNT_ID!,
    baseUrl: process.env.NAFATH_BASE_URL!,
  };

  async initiate(req: Request, res: Response) {
    try {
      const { national_id, user_id } = req.body;

      if (!national_id || national_id.length < 10) {
        return res.status(400).json({
          status: 'error',
          message: 'رقم الهوية الوطنية مطلوب ويجب أن يكون 10 أرقام على الأقل'
        });
      }

      // التحقق من وجود طلب سابق
      const existing = await NafathRequestModel.findOne({
        national_id,
        user_id: user_id || null,
        status: 'approved'
      });

      if (existing) {
        return res.status(400).json({
          status: 'error',
          message: 'يوجد طلب معتمد مسبقاً لهذا الرقم'
        });
      }

      const requestId = uuidv4();
      const webhookUrl = `${process.env.BASE_URL}/api/nafath/callback`;

      // إرسال الطلب إلى نفاذ
      const response = await axios.post(
        `${this.nafathConfig.baseUrl}/Authentication/Authority/IntegrationNafathAuth`,
        {
          nationalIds: [national_id],
          requestId,
          accountId: this.nafathConfig.accountId,
          webHookUrl: webhookUrl
        },
        {
          headers: {
            'thumbPrint': this.nafathConfig.thumbPrint,
            'accountId': this.nafathConfig.accountId,
            'Content-Type': 'application/json',
          }
        }
      );

      const external = response.data;

      if (external[0]?.error && external[0].error !== "Success") {
        return res.status(422).json({
          status: 'error',
          request_id: requestId,
          message: external[0].message || 'فشل في التحقق من الهوية',
          code: external[0].code || null,
          external_response: external,
        });
      }

      // حفظ الطلب في قاعدة البيانات
      await NafathRequestModel.create({
        request_id: requestId,
        user_id: user_id || null,
        national_id,
        status: 'pending',
      });

      res.json({
        status: 'sent',
        request_id: requestId,
        message: 'تم إرسال طلب التحقق. يرجى فتح تطبيق نفاذ للموافقة.',
        external_response: external,
      });

    } catch (error) {
      console.error('Error in nafath initiate:', error);
      res.status(500).json({
        status: 'error',
        message: 'حدث خطأ في الخادم'
      });
    }
  }

  async checkStatus(req: Request, res: Response) {
    try {
      const { national_id, user_id } = req.body;

      const nafath = await NafathRequestModel.findOne({
        national_id,
        user_id: user_id || null,
      });

      if (!nafath) {
        return res.status(404).json({
          status: 'not_found',
          message: 'لم يتم العثور على طلب مطابق.',
        });
      }

      const fullNameAr = [
        nafath.first_name_ar,
        nafath.middle_name_ar,
        nafath.last_name_ar
      ].filter(Boolean).join(' ').trim();

      res.json({
        status: nafath.status,
        national_id: nafath.national_id,
        request_id: nafath.request_id,
        full_name_ar: fullNameAr,
        signed_file_url: nafath.signed_file_path 
          ? `${process.env.BASE_URL}/storage/${nafath.signed_file_path}` 
          : null,
      });

    } catch (error) {
      console.error('Error in nafath checkStatus:', error);
      res.status(500).json({
        status: 'error',
        message: 'حدث خطأ في الخادم'
      });
    }
  }

  async callback(req: Request, res: Response) {
    try {
      console.log('Nafath callback received:', req.body);

      const { requestId, Status, usersInfo } = req.body;
      const statusCode = parseInt(Status);

      const nafath = await NafathRequestModel.findOne({ request_id: requestId });

      if (!nafath) {
        console.warn('Nafath request not found for requestId:', requestId);
        return res.status(404).json({ message: 'Nafath request not found.' });
      }

      if (statusCode === 1) {
        // فشل التحقق
        nafath.status = 'failed';
        await nafath.save();

        console.log('Nafath authentication failed', { requestId });
        return res.json({ message: 'Nafath authentication failed.' });
      }

      if (statusCode === 0) {
        // نجح التحقق
        const userInfo = usersInfo?.[0] || {};

        nafath.status = 'approved';
        nafath.first_name_en = userInfo.FirstNameEn || null;
        nafath.first_name_ar = userInfo.FirstNameAr || null;
        nafath.middle_name_en = userInfo.MiddleNameEn || null;
        nafath.middle_name_ar = userInfo.MiddleNameAr || null;
        nafath.third_name_en = userInfo.ThirdNameEn || null;
        nafath.third_name_ar = userInfo.ThirdNameAr || null;
        nafath.last_name_en = userInfo.LastNameEn || null;
        nafath.last_name_ar = userInfo.LastNameAr || null;

        await nafath.save();

        console.log('Nafath authentication approved', { requestId });
        return res.json({ message: 'User authenticated successfully.' });
      }

      console.error('Unhandled status code received', { requestId, Status: statusCode });
      res.status(400).json({ message: 'Unhandled status code' });

    } catch (error) {
      console.error('Error in nafath callback:', error);
      res.status(500).json({ message: 'Internal server error' });
    }
  }

  async sign(req: Request, res: Response) {
    try {
      const { national_id, user_id, contract_data } = req.body;

      const nafath = await NafathRequestModel.findOne({
        national_id,
        user_id: user_id || null,
        status: 'approved'
      });

      if (!nafath) {
        return res.status(403).json({
          signed: false,
          error: 'لم يتم العثور على طلب مطابق أو لم تتم المصادقة بعد.'
        });
      }

      // إنشاء العقد
      const fullName = [
        nafath.first_name_ar,
        nafath.middle_name_ar,
        nafath.last_name_ar
      ].filter(Boolean).join(' ').trim();

      const contractHtml = this.generateContractHtml({
        ...contract_data,
        national_id: nafath.national_id,
        fullname: fullName,
      });

      // تحويل إلى PDF
      const pdfBytes = await this.generatePDF(contractHtml);
      const base64File = Buffer.from(pdfBytes).toString('base64');
      const fileName = `contract_${nafath.request_id}.pdf`;

      // إرسال للتوقيع
      const signResponse = await this.sendToNafathForSigning(
        nafath.request_id,
        fileName,
        base64File
      );

      if (signResponse.status === 200) {
        const signedPdf = Buffer.from(signResponse.data, 'base64');
        const filePath = `nafath_signed/${nafath.request_id}.pdf`;
        
        // حفظ الملف
        await this.saveFile(filePath, signedPdf);
        
        nafath.signed_file_path = filePath;
        await nafath.save();

        res.json({
          signed: true,
          message: 'تم توقيع العقد بنجاح',
          file_url: `${process.env.BASE_URL}/storage/${filePath}`,
        });
      } else {
        res.status(500).json({
          signed: false,
          error: 'فشل في توقيع العقد',
          details: signResponse.data,
        });
      }

    } catch (error) {
      console.error('Error in nafath sign:', error);
      res.status(500).json({
        signed: false,
        error: 'حدث خطأ في الخادم'
      });
    }
  }

  private async sendToNafathForSigning(
    requestId: string,
    fileName: string,
    base64File: string
  ) {
    return await axios.post(
      `${this.nafathConfig.baseUrl}/IntegrationService/SadqESign/Nafath/Sign`,
      {
        RequestId: requestId,
        File: {
          fileName,
          File: base64File,
        },
      },
      {
        headers: {
          'thumbPrint': this.nafathConfig.thumbPrint,
          'accountId': this.nafathConfig.accountId,
          'Content-Type': 'application/json',
          'accept': 'text/plain',
        }
      }
    );
  }

  private generateContractHtml(data: any): string {
    return `
    <!DOCTYPE html>
    <html lang="ar" dir="rtl">
    <head>
        <meta charset="UTF-8">
        <title>عقد خدمة</title>
        <style>
            body { 
                font-family: 'Arial', sans-serif; 
                direction: rtl; 
                line-height: 1.6;
                margin: 40px;
            }
            .container { text-align: center; }
            .header { margin-bottom: 30px; }
            .content { text-align: justify; margin: 20px 0; }
            .section-title { font-weight: bold; margin-top: 20px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>عقد خدمة</h1>
                <p>تاريخ العقد: ${new Date().toLocaleDateString('ar-SA')}</p>
            </div>
            
            <div class="content">
                <div class="section-title">الطرف الأول: الشركة</div>
                <p>اسم الشركة: ${data.company_name}</p>
                
                <div class="section-title">الطرف الثاني: العميل</div>
                <p>الاسم: ${data.fullname}</p>
                <p>رقم الهوية: ${data.national_id}</p>
                <p>المدينة: ${data.city}</p>
                <p>الحي: ${data.neighborhood}</p>
                <p>نوع السكن: ${data.house_type}</p>
                
                <div class="section-title">بنود العقد</div>
                <p>${data.contract_terms || 'البنود الأساسية للعقد...'}</p>
            </div>
        </div>
    </body>
    </html>`;
  }

  private async generatePDF(html: string): Promise<Uint8Array> {
    // يمكنك استخدام مكتبة مثل puppeteer أو playwright لتحويل HTML إلى PDF
    // هذا مثال مبسط
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage();
    const { width, height } = page.getSize();
    
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
    
    page.drawText('عقد خدمة', {
      x: width / 2 - 50,
      y: height - 100,
      size: 20,
      font,
    });
    
    return await pdfDoc.save();
  }

  private async saveFile(filePath: string, data: Buffer): Promise<void> {
    // تنفيذ حفظ الملف في النظام
    const fs = require('fs').promises;
    const path = require('path');
    
    const fullPath = path.join(process.env.STORAGE_PATH || './storage', filePath);
    const dir = path.dirname(fullPath);
    
    await fs.mkdir(dir, { recursive: true });
    await fs.writeFile(fullPath, data);
  }
}
```

## 📄 قوالب العقود المتوفرة

يحتوي المشروع على **3 قوالب عقود مختلفة** لخدمة 3 خطوط أعمال منفصلة:

### 1. 💳 عقد خدمة قيدها (Buy Now Pay Later)
**الملف:** `contract_with_nafath.blade.php`
**الغرض:** خدمة "اشتر الآن وادفع مع الراتب"

**المميزات:**
- ✅ خدمة تمويل قصير الأجل للمستهلكين
- ✅ حد ائتماني يصل إلى 2500 ريال
- ✅ فترة سداد مرنة حتى 40 يوم
- ✅ بدون فوائد ربوية (متوافق مع الشريعة)
- ✅ يغطي شروط الإرجاع والاستبدال

**البيانات المطلوبة:**
```typescript
interface QidhaContractData {
  national_id: string;
  city: string;
  neighborhood: string;
  house_type: string;
  fullname: string;
}
```

### 2. 📈 عقد الاستثمار (Investment Contract)
**الملف:** `investor/contract_pdf.blade.php`
**الغرض:** اتفاقية استثمار في المتاجر الإلكترونية

**المميزات:**
- 💰 استثمار طويل الأجل (1-3 سنوات)
- 💰 عوائد شهرية ثابتة 4.5%
- 💰 نوعان من الاستثمار (رأسي/أفقي)
- 💰 ضمان رأس المال والأرباح
- 💰 حد أدنى 1000 ريال، حد أقصى 300,000 ريال

**البيانات المطلوبة:**
```typescript
interface InvestmentContractData {
  national_id: string;
  first_name: string;
  family_name: string;
  phone: string;
  email: string;
  region: string;
  amount: number;
  investment_type: 'vertical' | 'horizontal';
}
```

### 3. 🏍️ عقد بوابة التسهيل (Logistics/Motorcycle Contract)
**الملف:** `portal-logistice/contract_pdf.blade.php`
**الغرض:** بيع وتأجير الدراجات النارية للتوصيل

**المميزات:**
- 🏍️ نموذج عمل مختلط (بيع + إيجار)
- 🏍️ تملك جزئي أو كامل للدراجة
- 🏍️ قيمة الدراجة 6600 ريال (5000 أصل + 1600 تجهيز)
- 🏍️ فترة سداد 60 يوم للتملك الكامل
- 🏍️ إيجار شهري 660 ريال لمدة 3 سنوات
- 🏍️ تأمين شامل وتتبع GPS

**البيانات المطلوبة:**
```typescript
interface LogisticsContractData {
  national_id: string;
  first_name: string;
  family_name: string;
  phone: string;
  region: string;
  type: 0 | 1 | 2; // 0=both, 1=sale only, 2=rent only
}
```

## 🎯 لماذا 3 قوالب منفصلة؟

### **الأسباب التجارية:**
1. **خطوط أعمال مختلفة** - كل خدمة لها نموذج عمل منفصل
2. **جماهير مختلفة** - مستهلكون، مستثمرون، سائقو توصيل
3. **متطلبات قانونية مختلفة** - كل قطاع له لوائح خاصة
4. **شروط مالية مختلفة** - فترات سداد وضمانات متنوعة

### **الأسباب التقنية:**
```php
// من الكود المستخرج - يدعم عقود متعددة
if($data['type'] == 1 || $data['type'] == 0) {
    // عقد البيع
    echo '<h1>عقد بيع دراجة نارية</h1>';
}
if($data['type'] == 2 || $data['type'] == 0) {
    // عقد الإيجار  
    echo '<h1>عقد استئجار دراجة نارية</h1>';
}
```

### **Controllers منفصلة:**
- `NafathAuthController` → قيدها
- `InvestorAuthController` → الاستثمار
- `PortalLogisticeAuthController` → بوابة التسهيل

## 🔒 الأمان والحماية

### 1. حماية البيانات
```typescript
// middleware/security.ts
import rateLimit from 'express-rate-limit';
import helmet from 'helmet';

// تحديد معدل الطلبات
export const nafathRateLimit = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 دقيقة
  max: 10, // 10 طلبات كحد أقصى
  message: 'تم تجاوز الحد المسموح من الطلبات',
});

// حماية Headers
export const securityHeaders = helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'"],
      imgSrc: ["'self'", "data:", "https:"],
    },
  },
});
```

### 2. التحقق من صحة البيانات
```typescript
// validators/nafathValidator.ts
import Joi from 'joi';

export const initiateSchema = Joi.object({
  national_id: Joi.string().pattern(/^\d{10}$/).required(),
  user_id: Joi.number().integer().positive().optional(),
});

export const contractSchema = Joi.object({
  national_id: Joi.string().pattern(/^\d{10}$/).required(),
  user_id: Joi.number().integer().positive().optional(),
  contract_data: Joi.object({
    company_name: Joi.string().required(),
    city: Joi.string().required(),
    neighborhood: Joi.string().required(),
    house_type: Joi.string().required(),
    contract_terms: Joi.string().optional(),
  }).required(),
});
```

### 3. تشفير البيانات الحساسة
```typescript
// utils/encryption.ts
import crypto from 'crypto';

const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY!;
const ALGORITHM = 'aes-256-gcm';

export const encrypt = (text: string): string => {
  const iv = crypto.randomBytes(16);
  const cipher = crypto.createCipher(ALGORITHM, ENCRYPTION_KEY);
  cipher.setAAD(Buffer.from('nafath-data'));
  
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  
  const authTag = cipher.getAuthTag();
  
  return iv.toString('hex') + ':' + authTag.toString('hex') + ':' + encrypted;
};

export const decrypt = (encryptedData: string): string => {
  const parts = encryptedData.split(':');
  const iv = Buffer.from(parts[0], 'hex');
  const authTag = Buffer.from(parts[1], 'hex');
  const encrypted = parts[2];
  
  const decipher = crypto.createDecipher(ALGORITHM, ENCRYPTION_KEY);
  decipher.setAAD(Buffer.from('nafath-data'));
  decipher.setAuthTag(authTag);
  
  let decrypted = decipher.update(encrypted, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  
  return decrypted;
};
```

## 📊 المراقبة والتحليل

### 1. Logging System
```typescript
// utils/logger.ts
import winston from 'winston';

export const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  defaultMeta: { service: 'nafath-service' },
  transports: [
    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
    new winston.transports.File({ filename: 'logs/combined.log' }),
  ],
});

if (process.env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({
    format: winston.format.simple()
  }));
}
```

### 2. Metrics Collection
```typescript
// utils/metrics.ts
interface NafathMetrics {
  totalRequests: number;
  successfulVerifications: number;
  failedVerifications: number;
  contractsSigned: number;
  averageProcessingTime: number;
}

class MetricsCollector {
  private metrics: NafathMetrics = {
    totalRequests: 0,
    successfulVerifications: 0,
    failedVerifications: 0,
    contractsSigned: 0,
    averageProcessingTime: 0,
  };

  incrementTotalRequests() {
    this.metrics.totalRequests++;
  }

  incrementSuccessfulVerifications() {
    this.metrics.successfulVerifications++;
  }

  incrementFailedVerifications() {
    this.metrics.failedVerifications++;
  }

  incrementContractsSigned() {
    this.metrics.contractsSigned++;
  }

  updateAverageProcessingTime(time: number) {
    this.metrics.averageProcessingTime = 
      (this.metrics.averageProcessingTime + time) / 2;
  }

  getMetrics(): NafathMetrics {
    return { ...this.metrics };
  }

  getSuccessRate(): number {
    if (this.metrics.totalRequests === 0) return 0;
    return (this.metrics.successfulVerifications / this.metrics.totalRequests) * 100;
  }
}

export const metricsCollector = new MetricsCollector();
```

## 🚀 نشر التطبيق (Deployment)

### 1. متغيرات البيئة
```bash
# .env
NAFATH_THUMBPRINT=your_certificate_thumbprint
NAFATH_ACCOUNT_ID=your_account_id  
NAFATH_BASE_URL=https://apigw.sadq.sa

# Database
DATABASE_URL=postgresql://user:password@localhost:5432/nafath_db

# Security
ENCRYPTION_KEY=your-32-character-encryption-key
JWT_SECRET=your-jwt-secret

# Storage
STORAGE_PATH=./storage
BASE_URL=https://your-domain.com

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=10
```

### 2. Docker Configuration
```dockerfile
# Dockerfile
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

EXPOSE 3000

CMD ["npm", "start"]
```

```yaml
# docker-compose.yml
version: '3.8'

services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - .env
    depends_on:
      - db
      - redis

  db:
    image: postgres:14
    environment:
      POSTGRES_DB: nafath_db
      POSTGRES_USER: nafath_user
      POSTGRES_PASSWORD: secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data:
```

## 🧪 اختبار النظام

### 1. Unit Tests
```typescript
// tests/nafath.test.ts
import { describe, it, expect, beforeEach, jest } from '@jest/globals';
import { NafathService } from '../services/nafathService';

describe('NafathService', () => {
  let nafathService: NafathService;
  
  beforeEach(() => {
    nafathService = new NafathService({
      thumbPrint: 'test-thumbprint',
      accountId: 'test-account',
      baseUrl: 'https://test-api.com'
    });
  });

  it('should initiate verification successfully', async () => {
    const mockResponse = {
      status: 'sent',
      request_id: 'test-request-id',
      external_response: [{ error: 'Success' }]
    };

    jest.spyOn(axios, 'post').mockResolvedValue({ data: mockResponse });

    const result = await nafathService.initiate('1234567890');
    
    expect(result.status).toBe('sent');
    expect(result.request_id).toBe('test-request-id');
  });

  it('should handle verification failure', async () => {
    const mockResponse = {
      status: 'error',
      message: 'فشل في التحقق'
    };

    jest.spyOn(axios, 'post').mockResolvedValue({ data: mockResponse });

    await expect(nafathService.initiate('invalid-id'))
      .rejects
      .toThrow('فشل في التحقق');
  });
});
```

### 2. Integration Tests
```typescript
// tests/integration/nafath.integration.test.ts
import request from 'supertest';
import { app } from '../app';

describe('Nafath Integration Tests', () => {
  it('should complete full nafath flow', async () => {
    // 1. Initiate verification
    const initiateResponse = await request(app)
      .post('/api/nafath/initiate')
      .send({ national_id: '1234567890' })
      .expect(200);

    expect(initiateResponse.body.status).toBe('sent');
    
    // 2. Check status (should be pending)
    const statusResponse = await request(app)
      .post('/api/nafath/check-status')
      .send({ national_id: '1234567890' })
      .expect(200);

    expect(statusResponse.body.status).toBe('pending');

    // 3. Simulate callback
    await request(app)
      .post('/api/nafath/callback')
      .send({
        requestId: initiateResponse.body.request_id,
        Status: 0,
        usersInfo: [{
          FirstNameAr: 'أحمد',
          MiddleNameAr: 'محمد',
          LastNameAr: 'السعيد'
        }]
      })
      .expect(200);

    // 4. Check status again (should be approved)
    const finalStatusResponse = await request(app)
      .post('/api/nafath/check-status')
      .send({ national_id: '1234567890' })
      .expect(200);

    expect(finalStatusResponse.body.status).toBe('approved');
  });
});
```

## 📚 أمثلة الاستخدام

### 1. استخدام بسيط
```typescript
// Simple usage example
import { useNafath } from './hooks/useNafath';

function SimpleNafathDemo() {
  const { initiate, pollStatus, loading } = useNafath({ config });

  const handleVerify = async () => {
    try {
      await initiate('1234567890');
      const result = await pollStatus('1234567890');
      
      if (result.status === 'approved') {
        alert(`مرحباً ${result.full_name_ar}`);
      }
    } catch (error) {
      alert('فشل في التحقق');
    }
  };

  return (
    <button onClick={handleVerify} disabled={loading}>
      {loading ? 'جاري التحقق...' : 'تحقق عبر نفاذ'}
    </button>
  );
}
```

### 2. استخدام متقدم مع Redux
```typescript
// Redux integration
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

export const initiateNafath = createAsyncThunk(
  'nafath/initiate',
  async ({ nationalId, userId }: { nationalId: string; userId?: number }) => {
    const nafathService = new NafathService(nafathConfig);
    return await nafathService.initiate(nationalId, userId);
  }
);

const nafathSlice = createSlice({
  name: 'nafath',
  initialState: {
    loading: false,
    error: null,
    currentRequest: null,
    userInfo: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(initiateNafath.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(initiateNafath.fulfilled, (state, action) => {
        state.loading = false;
        state.currentRequest = action.payload;
      })
      .addCase(initiateNafath.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  },
});
```

## 🔍 استكشاف الأخطاء

### مشاكل شائعة وحلولها

**1. خطأ في التحقق من الشهادة:**
```bash
# تأكد من صحة NAFATH_THUMBPRINT
curl -X POST "https://apigw.sadq.sa/test" \
  -H "thumbPrint: YOUR_THUMBPRINT" \
  -H "accountId: YOUR_ACCOUNT_ID"
```

**2. عدم وصول callback:**
```bash
# تأكد من أن الـ URL قابل للوصول من الخارج
curl -X POST "https://yourdomain.com/api/nafath/callback" \
  -H "Content-Type: application/json" \
  -d '{"test": true}'
```

**3. فشل في التوقيع:**
- تأكد من أن PDF صالح وليس تالف
- تحقق من حجم الملف (يجب أن يكون أقل من الحد المسموح)
- تأكد من أن العقد يحتوي على النصوص المطلوبة

### Debug Mode
```typescript
// Enable debug logging
const nafathService = new NafathService(config, {
  debug: true,
  logLevel: 'verbose'
});
```

## 📞 الدعم والمساعدة

- **الوثائق الرسمية لنفاذ:** [دليل نفاذ للمطورين](https://nafath.sa/developers)
- **الدعم الفني:** support@nafath.sa
- **المجتمع:** [منتدى المطورين](https://community.nafath.sa)

## 📄 الترخيص

هذا الدليل مجاني للاستخدام والتعديل وفقاً لاحتياجات مشروعك.

---

**ملاحظة:** تأكد من اختبار جميع العمليات في بيئة التطوير قبل النشر في الإنتاج.

## 🔄 التحديثات المستقبلية

- دعم المصادقة الثنائية
- تحسين أداء معالجة PDF
- إضافة المزيد من قوالب العقود
- دعم اللغات المتعددة
- تحسين واجهة المستخدم

للحصول على آخر التحديثات، يرجى متابعة [مستودع المشروع](https://github.com/your-repo/nafath-integration).
